{"version":3,"sources":["consts.ts","getSaturnTime.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Consts","HOURS_PER_DAY","MINUTES_PER_HOUR","SECONDS_PER_MINUTE","MAINCOLOR","GetSaturnTime","initTime","Date","useState","time","setTime","useEffect","id","setInterval","clearInterval","nowSecond","Math","floor","getTime","restime","hours","minutes","seconds","Mark","styled","div","size","rotation","SecondHand","MinuteHand","HourHand","Circle","CenterDot","ClockWrapper","ClockText","window","innerHeight","Colon","span","renderClock","className","getSaturnTime","Array","map","_","i","toString","padStart","Main","App","min","innerWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3d91df1.chunk.js","sourcesContent":["class Consts {\r\n    static readonly HOURS_PER_DAY = 11;\r\n    static readonly MINUTES_PER_HOUR = 17;\r\n    static readonly SECONDS_PER_MINUTE = 197;\r\n\r\n    static readonly MAINCOLOR = \"#FFFFFF\";\r\n}\r\n\r\nexport default Consts","import { useEffect, useState } from \"react\";\r\nimport { setInterval } from \"timers\";\r\nimport Consts from \"./consts\";\r\n\r\n\r\ninterface StructSaturnTime {\r\n    hours: number\r\n    minutes: number\r\n    seconds: number\r\n}\r\n\r\nconst GetSaturnTime = (initTime = new Date()) => {\r\n    const [time, setTime] = useState(initTime);\r\n\r\n    useEffect(() => {\r\n        const id = setInterval(() => setTime(() => new Date()), 1000);\r\n        return () => clearInterval(id);\r\n    }, []);\r\n\r\n    const nowSecond = Math.floor(time.getTime() / 1000);\r\n    const restime: StructSaturnTime = {\r\n        hours: Math.floor(nowSecond / Consts.SECONDS_PER_MINUTE / Consts.MINUTES_PER_HOUR % Consts.HOURS_PER_DAY),\r\n        minutes: Math.floor(nowSecond / Consts.SECONDS_PER_MINUTE % Consts.MINUTES_PER_HOUR),\r\n        seconds: nowSecond % Consts.SECONDS_PER_MINUTE\r\n    }\r\n\r\n    return restime;\r\n}\r\n\r\nexport default GetSaturnTime;","import React from \"react\";\nimport styled from \"styled-components\";\nimport getSaturnTime from \"./getSaturnTime\";\nimport Consts from \"./consts\";\nimport './App.css';\n\nconst Mark = styled.div<{size: number, rotation: string}>`\n  position: absolute;\n  width: ${({ size }) => size / 300}px;\n  height: ${({ size }) => size / 10}px;\n  background: ${Consts.MAINCOLOR};\n  top: ${({ size }) => size / 30}px;\n  left: 50%;\n  transform: rotate( ${({ rotation }) => rotation || \"0deg\" } )\n    translate3d(-50%, 0, 0);\n  transform-origin: 0px ${({ size }) => size / 2 - size / 30}px;\n`\n\nconst SecondHand = styled.div<{size: number, rotation: string}>`\n  position: absolute;\n  width: ${({ size }) => size / 300}px;\n  height: ${({ size }) => size / 2 - size / 12}px;\n  background: ${Consts.MAINCOLOR};\n  top: ${({ size }) => size / 12}px;\n  left: 50%;\n  transform: rotate( ${({ rotation }) => rotation || \"0deg\" } )\n    translate3d(-50%, 0, 0);\n  transform-origin: 0px bottom;\n`\n\nconst MinuteHand = styled.div<{size: number, rotation: string}>`\n  position: absolute;\n  width: ${({ size }) => size / 100}px;\n  height: ${({ size }) => size / 2 - size / 6}px;\n  background: ${Consts.MAINCOLOR};\n  top: ${({ size }) => size / 6}px;\n  left: 50%;\n  transform: rotate( ${({ rotation }) => rotation || \"0deg\" } )\n    translate3d(-50%, 0, 0);\n  transform-origin: 0px bottom;\n`\n\nconst HourHand = styled.div<{size: number, rotation: string}>`\n  position: absolute;\n  width: ${({ size }) => size / 60}px;\n  height: ${({ size }) => size / 2 - size / 4.5}px;\n  background: ${Consts.MAINCOLOR};\n  top: ${({ size }) => size / 4.5}px;\n  left: 50%;\n  transform: rotate( ${({ rotation }) => rotation || \"0deg\" } )\n    translate3d(-50%, 0, 0);\n  transform-origin: 0px bottom;\n`\n\nconst Circle = styled.div<{size: number}>`\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  border-radius: 50%;\n`\n\nconst CenterDot = styled(Circle)`\n  position: absolute;\n  background: ${Consts.MAINCOLOR};\n  top: 50%;\n  left: 50%;\n  transform: translate3d(-50%, -50%, 0);\n`\n\nconst ClockWrapper = styled(Circle)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate3d(-50%, -50%, 0);\n  box-sizing: content-box;\n  margin: 0 auto;\n  /* border: ${({ size }) => size / 30}px solid black; */\n`\n\nconst ClockText = styled.div<{ size: number }>`\n  position: absolute;\n  top: ${({ size }) => (size + 3 * window.innerHeight) / 4}px;\n  left: 50%;\n  color: ${Consts.MAINCOLOR};\n  font-size: ${({ size }) => size / 8}px;\n  font-family: \"Squada One\";\n  letter-spacing: -.02em;\n  text-align: center;\n  white-space: nowrap;\n  transform: translate3d(-50%, -50%, 0);\n`\n\nconst Colon = styled.span<{ size: number }>`\n  font-family: Rubik;\n  font-weight: 300;\n  vertical-align: .1em;\n`\n\nconst renderClock = ( className: string, size: number ) => {\n\n  const time = getSaturnTime();\n\n  return (\n    <>\n      <ClockWrapper className={className} size={size}>\n        {[...Array(Consts.HOURS_PER_DAY)].map((_, i) => (\n          <Mark key={i} size={size} rotation={i * 360 / Consts.HOURS_PER_DAY + \"deg\"} />\n        ))}\n        <div>\n          <SecondHand size={size} rotation={time.seconds * 360 / Consts.SECONDS_PER_MINUTE + \"deg\"} />\n          <MinuteHand size={size} rotation={(time.minutes + time.seconds / Consts.SECONDS_PER_MINUTE) * 360 / Consts.MINUTES_PER_HOUR + \"deg\"} />\n          <HourHand size={size} rotation={(time.hours + time.minutes / Consts.MINUTES_PER_HOUR + time.seconds / Consts.MINUTES_PER_HOUR / Consts.SECONDS_PER_MINUTE) * 360 / Consts.HOURS_PER_DAY + \"deg\"} />\n          <CenterDot size={size / 30} />\n        </div>\n      </ClockWrapper>\n      <ClockText size={size}>\n        <span className=\"hours\">{time.hours.toString().padStart(2, \"0\")}</span>\n        <Colon size={size}> : </Colon>\n        <span className=\"minutes\">{time.minutes.toString().padStart(2, \"0\")}</span>\n        <Colon size={size}> : </Colon>\n        <span className=\"seconds\">{time.seconds.toString().padStart(3, \"0\")}</span>\n      </ClockText>\n    </>\n  );\n\n};\n\nconst Main = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background: #000000;\n`\n\nconst App = () => {\n  return (\n    <Main>\n        {renderClock(\"clock\", Math.min(window.innerWidth, window.innerHeight) * 2 / 3)}\n    </Main>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}